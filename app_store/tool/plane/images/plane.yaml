apiVersion: app.sealos.io/v1
kind: Instance
metadata:
  name: plane-cmxojrrl
  labels:
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  gitRepo: https://github.com/makeplane/plane
  templateType: inline
  categories:
    - tool
  defaults:
    app_host:
      type: string
      value: plane-hdswdwie
    app_name:
      type: string
      value: plane-cmxojrrl
  inputs: {}
  title: Plane
  url: http://plane.so/
  author: Sealos
  description: >-
    Open Source JIRA, Linear, Monday, and Asana Alternative. Plane helps you
    track your issues, epics, and product roadmaps in the simplest way possible.
  readme: https://cdn.jsdelivr.net/gh/makeplane/plane@preview/README.md
  icon: https://avatars.githubusercontent.com/u/115727700?s=48&v=4
  deployCount: 1

---
apiVersion: objectstorage.sealos.io/v1
kind: ObjectStorageBucket
metadata:
  name: plane-cmxojrrl-private
  labels:
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  policy: private

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    sealos-db-provider-cr: plane-cmxojrrl-pg
    app.kubernetes.io/instance: plane-cmxojrrl-pg
    app.kubernetes.io/managed-by: kbcli
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
  name: plane-cmxojrrl-pg

---
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: postgresql
    clusterversion.kubeblocks.io/name: postgresql-14.8.0
    sealos-db-provider-cr: plane-cmxojrrl-pg
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
  annotations: {}
  name: plane-cmxojrrl-pg
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: postgresql
  clusterVersionRef: postgresql-14.8.0
  componentSpecs:
    - componentDefRef: postgresql
      monitor: true
      name: postgresql
      replicas: 1
      resources:
        limits:
          cpu: 1000m
          memory: 1024Mi
        requests:
          cpu: 100m
          memory: 102Mi
      serviceAccountName: plane-cmxojrrl-pg
      switchPolicy:
        type: Noop
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
            storageClassName: openebs-backup
  terminationPolicy: Delete
  tolerations: []

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    sealos-db-provider-cr: plane-cmxojrrl-pg
    app.kubernetes.io/instance: plane-cmxojrrl-pg
    app.kubernetes.io/managed-by: kbcli
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
  name: plane-cmxojrrl-pg
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    sealos-db-provider-cr: plane-cmxojrrl-pg
    app.kubernetes.io/instance: plane-cmxojrrl-pg
    app.kubernetes.io/managed-by: kbcli
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
  name: plane-cmxojrrl-pg
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: plane-cmxojrrl-pg
subjects:
  - kind: ServiceAccount
    name: plane-cmxojrrl-pg

---
apiVersion: batch/v1
kind: Job
metadata:
  name: plane-cmxojrrl-pg-init
  labels:
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  completions: 1
  template:
    spec:
      containers:
        - name: pgsql-init
          image: senzing/postgresql-client:2.2.4
          env:
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: password
            - name: DATABASE_URL
              value: >-
                postgresql://postgres:$(PG_PASSWORD)@plane-cmxojrrl-pg-postgresql.ns-lg7dd5qb.svc:5432
          command:
            - /bin/sh
            - '-c'
            - >
              until psql ${DATABASE_URL} -c 'CREATE DATABASE plane;'
              &>/dev/null; do sleep 1; done
      restartPolicy: Never
  backoffLimit: 0
  ttlSecondsAfterFinished: 300

---
apiVersion: batch/v1
kind: Job
metadata:
  name: plane-cmxojrrl-api-migrate
  labels:
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  completions: 1
  template:
    spec:
      containers:
        - name: plane-cmxojrrl-api-migrate
          image: makeplane/plane-backend:v0.22-dev
          env:
            - name: DEBUG
              value: '0'
            - name: DOCKERIZED
              value: '1'
            - name: GUNICORN_WORKERS
              value: '1'
            - name: WEB_URL
              value: https://plane-hdswdwie.sealoshzh.site
            - name: CORS_ALLOWED_ORIGINS
              value: >-
                http://plane-hdswdwie.sealoshzh.site,https://plane-hdswdwie.sealoshzh.site
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: port
            - name: REDIS_USER
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: username
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: password
            - name: REDIS_URL
              value: >-
                redis://$(REDIS_USER):$(REDIS_PASSWORD)@plane-cmxojrrl-redis-redis.ns-lg7dd5qb.svc:$(REDIS_PORT)
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: port
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: password
            - name: DATABASE_URL
              value: >-
                postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@plane-cmxojrrl-pg-postgresql.ns-lg7dd5qb.svc:$(DATABASE_PORT)/plane
            - name: SECRET_KEY
              value: >-
                NjBncDBieWZ6MmR2ZmZhNDVjeGwyMHAxc2N5OXhicGY2ZDhjNXkwZ2VlamdreXAxYjU=
            - name: FILE_SIZE_LIMIT
              value: '5242880'
            - name: AWS_S3_BUCKET_NAME
              value: upload
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: secretKey
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: accessKey
            - name: BACKEND_STORAGE_PRIVATE_BUCKET
              valueFrom:
                secretKeyRef:
                  name: object-storage-key-lg7dd5qb-plane-cmxojrrl-private
                  key: bucket
            - name: BACKEND_STORAGE_MINIO_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: internal
            - name: AWS_S3_ENDPOINT_URL
              value: >-
                http://$(BACKEND_STORAGE_MINIO_ENDPOINT)/$(BACKEND_STORAGE_PRIVATE_BUCKET)
            - name: USE_MINIO
              value: '0'
          command:
            - /bin/sh
            - '-c'
            - >
              until ./bin/docker-entrypoint-migrator.sh &>/dev/null; do sleep 1;
              done
          resources:
            requests:
              cpu: 100m
              memory: 51Mi
            limits:
              cpu: 1000m
              memory: 512Mi
      restartPolicy: Never
  backoffLimit: 0
  ttlSecondsAfterFinished: 300

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    sealos-db-provider-cr: plane-cmxojrrl-redis
    app.kubernetes.io/instance: plane-cmxojrrl-redis
    app.kubernetes.io/managed-by: kbcli
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
  name: plane-cmxojrrl-redis

---
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: redis
    clusterversion.kubeblocks.io/name: redis-7.0.6
    sealos-db-provider-cr: plane-cmxojrrl-redis
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
  annotations: {}
  name: plane-cmxojrrl-redis
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: redis
  clusterVersionRef: redis-7.0.6
  componentSpecs:
    - componentDefRef: redis
      monitor: true
      name: redis
      replicas: 1
      resources:
        limits:
          cpu: 1000m
          memory: 1024Mi
        requests:
          cpu: 100m
          memory: 102Mi
      serviceAccountName: plane-cmxojrrl-redis
      switchPolicy:
        type: Noop
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi
            storageClassName: openebs-backup
    - componentDefRef: redis-sentinel
      monitor: true
      name: redis-sentinel
      replicas: 1
      resources:
        limits:
          cpu: 100m
          memory: 100Mi
        requests:
          cpu: 100m
          memory: 100Mi
      serviceAccountName: plane-cmxojrrl-redis
  terminationPolicy: Delete
  tolerations: []

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    sealos-db-provider-cr: plane-cmxojrrl-redis
    app.kubernetes.io/instance: plane-cmxojrrl-redis
    app.kubernetes.io/managed-by: kbcli
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
  name: plane-cmxojrrl-redis
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    sealos-db-provider-cr: plane-cmxojrrl-redis
    app.kubernetes.io/instance: plane-cmxojrrl-redis
    app.kubernetes.io/managed-by: kbcli
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
  name: plane-cmxojrrl-redis
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: plane-cmxojrrl-redis
subjects:
  - kind: ServiceAccount
    name: plane-cmxojrrl-redis
    namespace: ns-lg7dd5qb

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plane-cmxojrrl-admin
  annotations:
    originImageName: makeplane/plane-admin:v0.22-dev
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-admin
    app: plane-cmxojrrl-admin
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: plane-cmxojrrl-admin
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: plane-cmxojrrl-admin
    spec:
      automountServiceAccountToken: false
      containers:
        - name: plane-cmxojrrl-admin
          image: makeplane/plane-admin:v0.22-dev
          command:
            - node
          args:
            - admin/server.js
            - admin
          resources:
            requests:
              cpu: 10m
              memory: 12Mi
            limits:
              cpu: 100m
              memory: 128Mi
          ports:
            - containerPort: 3000
          imagePullPolicy: IfNotPresent

---
apiVersion: v1
kind: Service
metadata:
  name: plane-cmxojrrl-admin
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-admin
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  ports:
    - port: 3000
  selector:
    app: plane-cmxojrrl-admin

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plane-cmxojrrl-api
  annotations:
    originImageName: makeplane/plane-backend:v0.22-dev
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-api
    app: plane-cmxojrrl-api
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: plane-cmxojrrl-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: plane-cmxojrrl-api
    spec:
      automountServiceAccountToken: false
      containers:
        - name: plane-cmxojrrl-api
          image: makeplane/plane-backend:v0.22-dev
          command:
            - ./bin/docker-entrypoint-api.sh
          env:
            - name: DEBUG
              value: '0'
            - name: DOCKERIZED
              value: '1'
            - name: GUNICORN_WORKERS
              value: '1'
            - name: WEB_URL
              value: https://plane-hdswdwie.sealoshzh.site
            - name: CORS_ALLOWED_ORIGINS
              value: >-
                http://plane-hdswdwie.sealoshzh.site,https://plane-hdswdwie.sealoshzh.site
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: port
            - name: REDIS_USER
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: username
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: password
            - name: REDIS_URL
              value: >-
                redis://$(REDIS_USER):$(REDIS_PASSWORD)@plane-cmxojrrl-redis-redis.ns-lg7dd5qb.svc:$(REDIS_PORT)
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: port
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: password
            - name: DATABASE_URL
              value: >-
                postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@plane-cmxojrrl-pg-postgresql.ns-lg7dd5qb.svc:$(DATABASE_PORT)/plane
            - name: SECRET_KEY
              value: >-
                NjBncDBieWZ6MmR2ZmZhNDVjeGwyMHAxc2N5OXhicGY2ZDhjNXkwZ2VlamdreXAxYjU=
            - name: FILE_SIZE_LIMIT
              value: '5242880'
            - name: AWS_S3_BUCKET_NAME
              value: upload
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: secretKey
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: accessKey
            - name: BACKEND_STORAGE_PRIVATE_BUCKET
              valueFrom:
                secretKeyRef:
                  name: object-storage-key-lg7dd5qb-plane-cmxojrrl-private
                  key: bucket
            - name: BACKEND_STORAGE_MINIO_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: internal
            - name: AWS_S3_ENDPOINT_URL
              value: >-
                http://$(BACKEND_STORAGE_MINIO_ENDPOINT)/$(BACKEND_STORAGE_PRIVATE_BUCKET)
            - name: USE_MINIO
              value: '0'
          resources:
            requests:
              cpu: 50m
              memory: 25Mi
            limits:
              cpu: 500m
              memory: 256Mi
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          imagePullPolicy: IfNotPresent

---
apiVersion: v1
kind: Service
metadata:
  name: plane-cmxojrrl-api
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-api
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  ports:
    - port: 8000
  selector:
    app: plane-cmxojrrl-api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plane-cmxojrrl-beat-worker
  annotations:
    originImageName: makeplane/plane-backend:v0.22-dev
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-beat-worker
    app: plane-cmxojrrl-beat-worker
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: plane-cmxojrrl-beat-worker
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: plane-cmxojrrl-beat-worker
    spec:
      automountServiceAccountToken: false
      containers:
        - name: plane-cmxojrrl-beat-worker
          image: makeplane/plane-backend:v0.22-dev
          command:
            - ./bin/docker-entrypoint-beat.sh
          env:
            - name: DEBUG
              value: '0'
            - name: DOCKERIZED
              value: '1'
            - name: GUNICORN_WORKERS
              value: '1'
            - name: WEB_URL
              value: https://plane-hdswdwie.sealoshzh.site
            - name: CORS_ALLOWED_ORIGINS
              value: >-
                http://plane-hdswdwie.sealoshzh.site,https://plane-hdswdwie.sealoshzh.site
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: port
            - name: REDIS_USER
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: username
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: password
            - name: REDIS_URL
              value: >-
                redis://$(REDIS_USER):$(REDIS_PASSWORD)@plane-cmxojrrl-redis-redis.ns-lg7dd5qb.svc:$(REDIS_PORT)
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: port
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: password
            - name: DATABASE_URL
              value: >-
                postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@plane-cmxojrrl-pg-postgresql.ns-lg7dd5qb.svc:$(DATABASE_PORT)/plane
            - name: SECRET_KEY
              value: >-
                NjBncDBieWZ6MmR2ZmZhNDVjeGwyMHAxc2N5OXhicGY2ZDhjNXkwZ2VlamdreXAxYjU=
            - name: FILE_SIZE_LIMIT
              value: '5242880'
            - name: AWS_S3_BUCKET_NAME
              value: upload
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: secretKey
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: accessKey
            - name: BACKEND_STORAGE_PRIVATE_BUCKET
              valueFrom:
                secretKeyRef:
                  name: object-storage-key-lg7dd5qb-plane-cmxojrrl-private
                  key: bucket
            - name: BACKEND_STORAGE_MINIO_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: internal
            - name: AWS_S3_ENDPOINT_URL
              value: >-
                http://$(BACKEND_STORAGE_MINIO_ENDPOINT)/$(BACKEND_STORAGE_PRIVATE_BUCKET)
            - name: USE_MINIO
              value: '0'
          resources:
            requests:
              cpu: 20m
              memory: 25Mi
            limits:
              cpu: 200m
              memory: 256Mi
          imagePullPolicy: IfNotPresent

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plane-cmxojrrl-worker
  annotations:
    originImageName: makeplane/plane-backend:v0.22-dev
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-worker
    app: plane-cmxojrrl-worker
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: plane-cmxojrrl-worker
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: plane-cmxojrrl-worker
    spec:
      automountServiceAccountToken: false
      containers:
        - name: plane-cmxojrrl-worker
          image: makeplane/plane-backend:v0.22-dev
          command:
            - ./bin/docker-entrypoint-worker.sh
          env:
            - name: DEBUG
              value: '0'
            - name: DOCKERIZED
              value: '1'
            - name: GUNICORN_WORKERS
              value: '1'
            - name: WEB_URL
              value: https://plane-hdswdwie.sealoshzh.site
            - name: CORS_ALLOWED_ORIGINS
              value: >-
                http://plane-hdswdwie.sealoshzh.site,https://plane-hdswdwie.sealoshzh.site
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: port
            - name: REDIS_USER
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: username
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-redis-conn-credential
                  key: password
            - name: REDIS_URL
              value: >-
                redis://$(REDIS_USER):$(REDIS_PASSWORD)@plane-cmxojrrl-redis-redis.ns-lg7dd5qb.svc:$(REDIS_PORT)
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: port
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plane-cmxojrrl-pg-conn-credential
                  key: password
            - name: DATABASE_URL
              value: >-
                postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@plane-cmxojrrl-pg-postgresql.ns-lg7dd5qb.svc:$(DATABASE_PORT)/plane
            - name: SECRET_KEY
              value: >-
                NjBncDBieWZ6MmR2ZmZhNDVjeGwyMHAxc2N5OXhicGY2ZDhjNXkwZ2VlamdreXAxYjU=
            - name: FILE_SIZE_LIMIT
              value: '5242880'
            - name: AWS_S3_BUCKET_NAME
              value: upload
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: secretKey
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: accessKey
            - name: BACKEND_STORAGE_PRIVATE_BUCKET
              valueFrom:
                secretKeyRef:
                  name: object-storage-key-lg7dd5qb-plane-cmxojrrl-private
                  key: bucket
            - name: BACKEND_STORAGE_MINIO_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: internal
            - name: AWS_S3_ENDPOINT_URL
              value: >-
                http://$(BACKEND_STORAGE_MINIO_ENDPOINT)/$(BACKEND_STORAGE_PRIVATE_BUCKET)
            - name: USE_MINIO
              value: '0'
          resources:
            requests:
              cpu: 20m
              memory: 204Mi
            limits:
              cpu: 200m
              memory: 2048Mi
          imagePullPolicy: IfNotPresent

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plane-cmxojrrl-space
  annotations:
    originImageName: makeplane/plane-space:v0.22-dev
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-space
    app: plane-cmxojrrl-space
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: plane-cmxojrrl-space
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: plane-cmxojrrl-space
    spec:
      automountServiceAccountToken: false
      containers:
        - name: plane-cmxojrrl-space
          image: makeplane/plane-space:v0.22-dev
          command:
            - node
          args:
            - space/server.js
            - space
          resources:
            requests:
              cpu: 10m
              memory: 12Mi
            limits:
              cpu: 100m
              memory: 128Mi
          imagePullPolicy: IfNotPresent

---
apiVersion: v1
kind: Service
metadata:
  name: plane-cmxojrrl-space
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-space
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  ports:
    - port: 3000
  selector:
    app: plane-cmxojrrl-space

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plane-cmxojrrl-web
  annotations:
    originImageName: makeplane/plane-frontend:v0.22-dev
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-web
    app: plane-cmxojrrl-web
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: plane-cmxojrrl-web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: plane-cmxojrrl-web
    spec:
      automountServiceAccountToken: false
      containers:
        - name: plane-cmxojrrl-web
          image: makeplane/plane-frontend:v0.22-dev
          command:
            - node
          args:
            - web/server.js
            - web
          resources:
            requests:
              cpu: 10m
              memory: 12Mi
            limits:
              cpu: 100m
              memory: 128Mi
          imagePullPolicy: IfNotPresent

---
apiVersion: v1
kind: Service
metadata:
  name: plane-cmxojrrl-web
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-web
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  ports:
    - port: 3000
  selector:
    app: plane-cmxojrrl-web

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: plane-cmxojrrl-web
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl-web
    cloud.sealos.io/app-deploy-manager-domain: plane-hdswdwie
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
  annotations:
    higress.io/response-header-control-remove: X-Frame-Options
    higress.io/response-header-control-update: >
      Content-Security-Policy "default-src * blob: data: *.sealoshzh.site
      sealoshzh.site; img-src * data: blob: resource: *.sealoshzh.site
      sealoshzh.site; connect-src * wss: blob: resource:; style-src 'self'
      'unsafe-inline' blob: *.sealoshzh.site sealoshzh.site resource:;
      script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: *.sealoshzh.site
      sealoshzh.site resource: *.baidu.com *.bdstatic.com; frame-src 'self'
      *.sealoshzh.site sealoshzh.site mailto: tel: weixin: mtt: *.baidu.com;
      frame-ancestors 'self' https://sealoshzh.site https://*.sealoshzh.site"

      X-Xss-Protection "1; mode=block"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/configuration-snippet: >
      more_clear_headers "X-Frame-Options:";

      more_set_headers "Content-Security-Policy: default-src * blob: data:
      *.sealoshzh.site sealoshzh.site; img-src * data: blob: resource:
      *.sealoshzh.site sealoshzh.site; connect-src * wss: blob: resource:;
      style-src 'self' 'unsafe-inline' blob: *.sealoshzh.site sealoshzh.site
      resource:; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob:
      *.sealoshzh.site sealoshzh.site resource: *.baidu.com *.bdstatic.com;
      frame-src 'self' *.sealoshzh.site sealoshzh.site mailto: tel: weixin: mtt:
      *.baidu.com; frame-ancestors 'self' https://sealoshzh.site
      https://*.sealoshzh.site";

      more_set_headers "X-Xss-Protection: 1; mode=block";

      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: plane-hdswdwie.sealoshzh.site
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: plane-cmxojrrl-web
                port:
                  number: 3000
          - pathType: Prefix
            path: /api
            backend:
              service:
                name: plane-cmxojrrl-api
                port:
                  number: 8000
          - pathType: Prefix
            path: /auth
            backend:
              service:
                name: plane-cmxojrrl-api
                port:
                  number: 8000
          - pathType: Prefix
            path: /spaces
            backend:
              service:
                name: plane-cmxojrrl-space
                port:
                  number: 3000
          - pathType: Prefix
            path: /god-mode
            backend:
              service:
                name: plane-cmxojrrl-admin
                port:
                  number: 3000
  tls:
    - hosts:
        - plane-hdswdwie.sealoshzh.site
      secretName: wildcard-cert

---
apiVersion: app.sealos.io/v1
kind: App
metadata:
  name: plane-cmxojrrl
  labels:
    cloud.sealos.io/app-deploy-manager: plane-cmxojrrl
    cloud.sealos.io/deploy-on-sealos: plane-cmxojrrl
spec:
  data:
    url: https://plane-hdswdwie.sealoshzh.site
  displayType: normal
  icon: https://avatars.githubusercontent.com/u/115727700?s=48&v=4
  name: Plane
  type: iframe
